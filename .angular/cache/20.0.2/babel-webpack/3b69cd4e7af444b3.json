{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, registerables, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\nlet ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    constructor() {\n      this.colorschemesOptions = new BehaviorSubject(undefined);\n    }\n    setColorschemesOptions(options) {\n      this.pColorschemesOptions = options;\n      this.colorschemesOptions.next(options);\n    }\n    getColorschemesOptions() {\n      return this.pColorschemesOptions;\n    }\n  }\n  ThemeService.ɵfac = function ThemeService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || ThemeService)();\n  };\n  ThemeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ThemeService;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet BaseChartDirective = /*#__PURE__*/(() => {\n  class BaseChartDirective {\n    constructor(element, zone, themeService) {\n      this.zone = zone;\n      this.themeService = themeService;\n      this.type = 'bar';\n      this.plugins = [];\n      this.chartClick = new EventEmitter();\n      this.chartHover = new EventEmitter();\n      this.subs = [];\n      this.ctx = element.nativeElement.getContext('2d');\n      this.subs.push(this.themeService.colorschemesOptions.pipe(distinctUntilChanged()).subscribe(r => this.themeChanged(r)));\n    }\n    ngOnChanges(changes) {\n      const requireRender = ['type'];\n      const propertyNames = Object.getOwnPropertyNames(changes);\n      if (propertyNames.some(key => requireRender.includes(key)) || propertyNames.every(key => changes[key].isFirstChange())) {\n        this.render();\n      } else {\n        const config = this.getChartConfiguration();\n        if (this.chart) {\n          Object.assign(this.chart.config.data, config.data);\n          if (this.chart.config.plugins) {\n            Object.assign(this.chart.config.plugins, config.plugins);\n          }\n          if (this.chart.config.options) {\n            Object.assign(this.chart.config.options, config.options);\n          }\n        }\n        this.update();\n      }\n    }\n    ngOnDestroy() {\n      if (this.chart) {\n        this.chart.destroy();\n        this.chart = void 0;\n      }\n      this.subs.forEach(s => s.unsubscribe());\n    }\n    render() {\n      if (this.chart) {\n        this.chart.destroy();\n      }\n      Chart.register(...this.plugins);\n      return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n    }\n    update(duration) {\n      if (this.chart) {\n        this.zone.runOutsideAngular(() => this.chart?.update(duration));\n      }\n    }\n    hideDataset(index, hidden) {\n      if (this.chart) {\n        this.chart.getDatasetMeta(index).hidden = hidden;\n        this.update();\n      }\n    }\n    isDatasetHidden(index) {\n      return this.chart?.getDatasetMeta(index)?.hidden;\n    }\n    toBase64Image() {\n      return this.chart?.toBase64Image();\n    }\n    themeChanged(options) {\n      this.themeOverrides = options;\n      if (this.chart) {\n        if (this.chart.config.options) {\n          Object.assign(this.chart.config.options, this.getChartOptions());\n        }\n        this.update();\n      }\n    }\n    getChartOptions() {\n      return merge({\n        onHover: (event, active) => {\n          if (!this.chartHover.observed && !this.chartHover.observers?.length) {\n            return;\n          }\n          this.zone.run(() => this.chartHover.emit({\n            event,\n            active\n          }));\n        },\n        onClick: (event, active) => {\n          if (!this.chartClick.observed && !this.chartClick.observers?.length) {\n            return;\n          }\n          this.zone.run(() => this.chartClick.emit({\n            event,\n            active\n          }));\n        }\n      }, this.themeOverrides, this.options, {\n        plugins: {\n          legend: {\n            display: this.legend\n          }\n        }\n      });\n    }\n    getChartConfiguration() {\n      return {\n        type: this.type,\n        data: this.getChartData(),\n        options: this.getChartOptions()\n      };\n    }\n    getChartData() {\n      return this.data ? this.data : {\n        labels: this.labels || [],\n        datasets: this.datasets || []\n      };\n    }\n  }\n  BaseChartDirective.ɵfac = function BaseChartDirective_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || BaseChartDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(ThemeService));\n  };\n  BaseChartDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseChartDirective,\n    selectors: [[\"canvas\", \"baseChart\", \"\"]],\n    inputs: {\n      type: \"type\",\n      legend: \"legend\",\n      data: \"data\",\n      options: \"options\",\n      plugins: \"plugins\",\n      labels: \"labels\",\n      datasets: \"datasets\"\n    },\n    outputs: {\n      chartClick: \"chartClick\",\n      chartHover: \"chartHover\"\n    },\n    exportAs: [\"base-chart\"],\n    standalone: false,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return BaseChartDirective;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst baseColors = [[255, 99, 132], [54, 162, 235], [255, 206, 86], [231, 233, 237], [75, 192, 192], [151, 187, 205], [220, 220, 220], [247, 70, 74], [70, 191, 189], [253, 180, 92], [148, 159, 177], [77, 83, 96]];\nconst builtInDefaults = {\n  datasets: {\n    line: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.4),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBackgroundColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: context => rgba(generateColor(context.datasetIndex), 0.8)\n    },\n    bar: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.datasetIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.datasetIndex), 1)\n    },\n    get radar() {\n      return this.line;\n    },\n    doughnut: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: '#fff',\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n    get pie() {\n      return this.doughnut;\n    },\n    polarArea: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n    get bubble() {\n      return this.doughnut;\n    },\n    get scatter() {\n      return this.doughnut;\n    },\n    get area() {\n      return this.polarArea;\n    }\n  }\n};\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors\n */\nfunction generateColor(index = 0) {\n  return baseColors[index] || getRandomColor();\n}\nlet NgChartsConfiguration = /*#__PURE__*/(() => {\n  class NgChartsConfiguration {}\n  NgChartsConfiguration.ɵfac = function NgChartsConfiguration_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgChartsConfiguration)();\n  };\n  NgChartsConfiguration.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NgChartsConfiguration,\n    factory: NgChartsConfiguration.ɵfac,\n    providedIn: 'root'\n  });\n  return NgChartsConfiguration;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nChart.register(...registerables);\nlet NgChartsModule = /*#__PURE__*/(() => {\n  class NgChartsModule {\n    constructor(config) {\n      if (config?.plugins) Chart.register(...config?.plugins);\n      const ngChartsDefaults = merge(builtInDefaults, config?.defaults || {});\n      defaults.set(ngChartsDefaults);\n    }\n    static forRoot(config) {\n      return {\n        ngModule: NgChartsModule,\n        providers: [{\n          provide: NgChartsConfiguration,\n          useValue: config\n        }]\n      };\n    }\n  }\n  NgChartsModule.ɵfac = function NgChartsModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || NgChartsModule)(i0.ɵɵinject(NgChartsConfiguration, 8));\n  };\n  NgChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgChartsModule\n  });\n  NgChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return NgChartsModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ng2-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };","map":{"version":3,"names":["i0","Injectable","EventEmitter","Directive","Input","Output","NgModule","Optional","Chart","registerables","defaults","distinctUntilChanged","merge","BehaviorSubject","ThemeService","constructor","colorschemesOptions","undefined","setColorschemesOptions","options","pColorschemesOptions","next","getColorschemesOptions","ɵfac","ThemeService_Factory","__ngFactoryType__","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","BaseChartDirective","element","zone","themeService","type","plugins","chartClick","chartHover","subs","ctx","nativeElement","getContext","push","pipe","subscribe","r","themeChanged","ngOnChanges","changes","requireRender","propertyNames","Object","getOwnPropertyNames","some","key","includes","every","isFirstChange","render","config","getChartConfiguration","chart","assign","data","update","ngOnDestroy","destroy","forEach","s","unsubscribe","register","runOutsideAngular","duration","hideDataset","index","hidden","getDatasetMeta","isDatasetHidden","toBase64Image","themeOverrides","getChartOptions","onHover","event","active","observed","observers","length","run","emit","onClick","legend","display","getChartData","labels","datasets","BaseChartDirective_Factory","ɵɵdirectiveInject","ElementRef","NgZone","ɵdir","ɵɵdefineDirective","selectors","inputs","outputs","exportAs","standalone","features","ɵɵNgOnChangesFeature","baseColors","builtInDefaults","line","backgroundColor","context","rgba","generateColor","datasetIndex","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","bar","hoverBackgroundColor","hoverBorderColor","radar","doughnut","dataIndex","pie","polarArea","bubble","scatter","area","colour","alpha","concat","join","getRandomInt","min","max","Math","floor","random","getRandomColor","NgChartsConfiguration","NgChartsConfiguration_Factory","NgChartsModule","ngChartsDefaults","set","forRoot","ngModule","providers","provide","useValue","NgChartsModule_Factory","ɵɵinject","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports"],"sources":["C:/Users/ASUS/Documents/UNIVERSIDAD/SEXTO SEMESTRE/PROCESOS ADMINISTRATIVOS/IngenieriaProg/node_modules/ng2-charts/fesm2020/ng2-charts.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, registerables, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\n\nclass ThemeService {\n    constructor() {\n        this.colorschemesOptions = new BehaviorSubject(undefined);\n    }\n    setColorschemesOptions(options) {\n        this.pColorschemesOptions = options;\n        this.colorschemesOptions.next(options);\n    }\n    getColorschemesOptions() {\n        return this.pColorschemesOptions;\n    }\n}\nThemeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nThemeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: ThemeService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass BaseChartDirective {\n    constructor(element, zone, themeService) {\n        this.zone = zone;\n        this.themeService = themeService;\n        this.type = 'bar';\n        this.plugins = [];\n        this.chartClick = new EventEmitter();\n        this.chartHover = new EventEmitter();\n        this.subs = [];\n        this.ctx = element.nativeElement.getContext('2d');\n        this.subs.push(this.themeService.colorschemesOptions\n            .pipe(distinctUntilChanged())\n            .subscribe(r => this.themeChanged(r)));\n    }\n    ngOnChanges(changes) {\n        const requireRender = ['type'];\n        const propertyNames = Object.getOwnPropertyNames(changes);\n        if (propertyNames.some(key => requireRender.includes(key)) ||\n            propertyNames.every(key => changes[key].isFirstChange())) {\n            this.render();\n        }\n        else {\n            const config = this.getChartConfiguration();\n            if (this.chart) {\n                Object.assign(this.chart.config.data, config.data);\n                if (this.chart.config.plugins) {\n                    Object.assign(this.chart.config.plugins, config.plugins);\n                }\n                if (this.chart.config.options) {\n                    Object.assign(this.chart.config.options, config.options);\n                }\n            }\n            this.update();\n        }\n    }\n    ngOnDestroy() {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = void 0;\n        }\n        this.subs.forEach(s => s.unsubscribe());\n    }\n    render() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n        Chart.register(...this.plugins);\n        return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n    }\n    update(duration) {\n        if (this.chart) {\n            this.zone.runOutsideAngular(() => this.chart?.update(duration));\n        }\n    }\n    hideDataset(index, hidden) {\n        if (this.chart) {\n            this.chart.getDatasetMeta(index).hidden = hidden;\n            this.update();\n        }\n    }\n    isDatasetHidden(index) {\n        return this.chart?.getDatasetMeta(index)?.hidden;\n    }\n    toBase64Image() {\n        return this.chart?.toBase64Image();\n    }\n    themeChanged(options) {\n        this.themeOverrides = options;\n        if (this.chart) {\n            if (this.chart.config.options) {\n                Object.assign(this.chart.config.options, this.getChartOptions());\n            }\n            this.update();\n        }\n    }\n    getChartOptions() {\n        return merge({\n            onHover: (event, active) => {\n                if (!this.chartHover.observed && !this.chartHover.observers?.length) {\n                    return;\n                }\n                this.zone.run(() => this.chartHover.emit({ event, active }));\n            },\n            onClick: (event, active) => {\n                if (!this.chartClick.observed && !this.chartClick.observers?.length) {\n                    return;\n                }\n                this.zone.run(() => this.chartClick.emit({ event, active }));\n            }\n        }, this.themeOverrides, this.options, {\n            plugins: {\n                legend: {\n                    display: this.legend\n                }\n            }\n        });\n    }\n    getChartConfiguration() {\n        return {\n            type: this.type,\n            data: this.getChartData(),\n            options: this.getChartOptions()\n        };\n    }\n    getChartData() {\n        return this.data ? this.data : {\n            labels: this.labels || [],\n            datasets: this.datasets || []\n        };\n    }\n}\nBaseChartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: BaseChartDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: ThemeService }], target: i0.ɵɵFactoryTarget.Directive });\nBaseChartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.11\", type: BaseChartDirective, selector: \"canvas[baseChart]\", inputs: { type: \"type\", legend: \"legend\", data: \"data\", options: \"options\", plugins: \"plugins\", labels: \"labels\", datasets: \"datasets\" }, outputs: { chartClick: \"chartClick\", chartHover: \"chartHover\" }, exportAs: [\"base-chart\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: BaseChartDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: 'canvas[baseChart]',\n                    exportAs: 'base-chart',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: ThemeService }]; }, propDecorators: { type: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], plugins: [{\n                type: Input\n            }], labels: [{\n                type: Input\n            }], datasets: [{\n                type: Input\n            }], chartClick: [{\n                type: Output\n            }], chartHover: [{\n                type: Output\n            }] } });\n\nconst baseColors = [\n    [255, 99, 132],\n    [54, 162, 235],\n    [255, 206, 86],\n    [231, 233, 237],\n    [75, 192, 192],\n    [151, 187, 205],\n    [220, 220, 220],\n    [247, 70, 74],\n    [70, 191, 189],\n    [253, 180, 92],\n    [148, 159, 177],\n    [77, 83, 96]\n];\n\nconst builtInDefaults = {\n    datasets: {\n        line: {\n            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.4),\n            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            pointBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: (context) => rgba(generateColor(context.datasetIndex), 0.8)\n        },\n        bar: {\n            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.6),\n            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            hoverBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.8),\n            hoverBorderColor: (context) => rgba(generateColor(context.datasetIndex), 1)\n        },\n        get radar() {\n            return this.line;\n        },\n        doughnut: {\n            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),\n            borderColor: '#fff',\n            hoverBackgroundColor: (context) => rgba(generateColor(context.dataIndex), 1),\n            hoverBorderColor: (context) => rgba(generateColor(context.dataIndex), 1)\n        },\n        get pie() {\n            return this.doughnut;\n        },\n        polarArea: {\n            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),\n            borderColor: (context) => rgba(generateColor(context.dataIndex), 1),\n            hoverBackgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.8),\n            hoverBorderColor: (context) => rgba(generateColor(context.dataIndex), 1)\n        },\n        get bubble() {\n            return this.doughnut;\n        },\n        get scatter() {\n            return this.doughnut;\n        },\n        get area() {\n            return this.polarArea;\n        }\n    }\n};\nfunction rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction getRandomColor() {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors\n */\nfunction generateColor(index = 0) {\n    return baseColors[index] || getRandomColor();\n}\n\nclass NgChartsConfiguration {\n}\nNgChartsConfiguration.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgChartsConfiguration.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsConfiguration, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nChart.register(...registerables);\nclass NgChartsModule {\n    constructor(config) {\n        if (config?.plugins)\n            Chart.register(...config?.plugins);\n        const ngChartsDefaults = merge(builtInDefaults, config?.defaults || {});\n        defaults.set(ngChartsDefaults);\n    }\n    static forRoot(config) {\n        return {\n            ngModule: NgChartsModule,\n            providers: [\n                { provide: NgChartsConfiguration, useValue: config }\n            ]\n        };\n    }\n}\nNgChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, deps: [{ token: NgChartsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nNgChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, declarations: [BaseChartDirective], exports: [BaseChartDirective] });\nNgChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.11\", ngImport: i0, type: NgChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [BaseChartDirective],\n                    exports: [BaseChartDirective]\n                }]\n        }], ctorParameters: function () { return [{ type: NgChartsConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/*\n * Public API Surface of ng2-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}